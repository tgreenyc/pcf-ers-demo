resources:
- name: git-repo
  type: git
  source:
    uri: {{GIT_REPO}}
    branch: master
    private_key: {{GIT_PRIVATE_KEY}}

- name: deploy-test-app
  type: cf
  source:
    api: {{CF_API}}
    username: {{CF_USER}}
    password: {{CF_PASS}}
    organization: {{CF_TEST_ORG}}
    space: {{CF_TEST_SPACE}}
    skip_cert_check: true

- name: deploy-uat-app
  type: cf
  source:
    api: {{CF_API}}
    username: {{CF_USER}}
    password: {{CF_PASS}}
    organization: {{CF_UAT_ORG}}
    space: {{CF_UAT_SPACE}}
    skip_cert_check: true

- name: deploy-production-app
  type: cf
  source:
    api: {{CF_API}}
    username: {{CF_USER}}
    password: {{CF_PASS}}
    organization: {{CF_PROD_ORG}}
    space: {{CF_PROD_SPACE}}
    skip_cert_check: true

- name: version
  type: semver
  source:
    driver: git
    uri: {{GIT_REPO}}
    branch: version
    file: version
    private_key: {{GIT_PRIVATE_KEY}}
    initial_version: 1.0.0

- name: release-candidate
  type: github-release
  source:
    owner: {{GIT_USER}}
    repository: {{GIT_RELEASE_REPO}}
    access_token: {{GIT_ACCESS_TOKEN}}

- name: production-release
  type: github-release
  source:
    owner: {{GIT_USER}}
    repository: {{GIT_RELEASE_REPO}}
    access_token: {{GIT_ACCESS_TOKEN}}


jobs:
  - name: unit-tests
    plan:
    - get: git-repo
      trigger: true
    - task: unit
      file: git-repo/ci/tasks/unit.yml

  - name: build-artifact
    serial_groups: [version]
    serial: true
    plan:
    - get: git-repo
      passed: [unit-tests]
      trigger: true
    - get: version
      params: { pre: rc }
    - task: build-artifact
      file: git-repo/ci/tasks/build-artifact.yml
      timeout: 5m
      params:
        base_name: pcf-ers-demo
    - put: release-candidate
      params:
        name: git-repo/ci/name
        tag: version/number
        body: git-repo/ci/release-body
        globs:
          - artifact-dir/pcf-ers-demo*.jar
    - put: git-repo
      params:
        repository: git-repo
        tag: version/number
    - put: version
      params: {file: version/number}

  - name: integration-tests
    serial_groups: [version]
    plan:
    - aggregate:
      - get: version
        passed: [build-artifact]
        trigger: true
      - get: release-candidate
        passed: [build-artifact]
      - get: git-repo
        passed: [build-artifact]
    - put: deploy-test-app
      params:
        manifest: git-repo/manifest-test.yml
        current_app_name: pcf-ers-demo-test
        path: release-candidate/pcf-ers-demo*.jar

  - name: promote-to-uat
    serial_groups: [version]
    plan:
    - aggregate:
      - get: release-candidate
        passed: [integration-tests]
        trigger: true
      - get: version
        passed: [integration-tests]
      - get: git-repo
        passed: [integration-tests]
    - put: deploy-uat-app
      params:
        manifest: git-repo/manifest-uat.yml
        current_app_name: pcf-ers-demo-uat
        path: release-candidate/pcf-ers-demo*.jar

  - name: ship-it
    serial_groups: [version]
    serial: true
    plan:
    - aggregate:
      - get: release-candidate
        passed: [promote-to-uat]
      - get: version
        params: { bump: final }
        passed: [promote-to-uat]
      - get: git-repo
        passed: [promote-to-uat]
    - task: prepare-final
      file: git-repo/ci/tasks/prepare-final.yml
      params:
        base_name: pcf-ers-demo
    - put: production-release
      params:
        name: git-repo/ci/name
        tag: version/number
        body: git-repo/ci/release-body
        globs:
          - final-dir/pcf-ers-demo*.jar
    - put: deploy-production-app
      params:
        manifest: git-repo/manifest-prod.yml
        current_app_name: pcf-ers-demo
        path: final-dir/pcf-ers-demo*.jar

  - name: configure-kong
    plan:
    - get: git-repo
      passed: [ship-it]
    - task: unit
      file: git-repo/ci/tasks/unit.yml
      params:
        ROUTE: pcf-ers-demo-tg
        DOMAIN: run.pivotal.io
        GW_DOMAIN: apps.pcfnyc.com

  - name: major
    serial_groups: [ version ]
    plan:
      - put: version
        params: { bump: major, pre: rc }

  - name: minor
    serial_groups: [ version ]
    plan:
      - put: version
        params: { bump: minor, pre: rc }

  - name: patch
    serial_groups: [ version ]
    plan:
      - get: version
        passed: [ ship-it ]
        trigger: true
      - put: version
        params: { bump: patch }
